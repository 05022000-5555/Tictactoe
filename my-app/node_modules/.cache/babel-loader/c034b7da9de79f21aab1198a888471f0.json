{"ast":null,"code":"var _jsxFileName = \"F:\\\\ReactJS\\\\my-app\\\\src\\\\Components\\\\tictactoe\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useState } from 'react';\nimport { caculatewinner } from '../../hepper';\nimport Board from './Board';\nimport \"./GameStyle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  board: Array(9).fill(null),\n  xIsNext: true\n}; // immutable\n\nconst gameReducer = (state, action) => {\n  switch (action.type) {\n    case 'CLICK':\n      {\n        const {\n          board,\n          xIsNext\n        } = state;\n        const {\n          index,\n          winner\n        } = action.payload;\n        if (winner || board[index]) return state;\n        const nextState = JSON.parse(JSON.stringify(state));\n        nextState.board[index] = xIsNext ? \"X\" : \"O\";\n        nextState.xIsNext = !xIsNext;\n        return nextState;\n      }\n\n    case 'RESET':\n      {\n        const nextState = JSON.parse(JSON.stringify(state));\n        nextState.board;\n        return nextState;\n      }\n\n    default:\n      break;\n  }\n\n  return state;\n};\n\nconst Game = () => {\n  _s();\n\n  // const [board, setBoard] = useState(Array(9).fill(null))\n  // const [xIsNext, setXIsNext] = useState(true)\n  const [state, dispatch] = useReducer(gameReducer, initialState); // const [state , setState] = useState({\n  //     xIsNext: true,\n  //     board: Array(9).fill(null),\n  // })\n\n  const winner = caculatewinner(state.board);\n\n  const handleClick = index => {\n    const boardCopy = [...state.board]; // if(winner || boardCopy[index]) return\n\n    dispatch({\n      type: 'CLICK',\n      payload: {\n        index,\n        winner\n      }\n    });\n    boardCopy[index] = state.xIsNext ? \"X\" : \"O\"; // setState({\n    //     board: boardCopy,\n    //     xIsNext: !state.xIsNext\n    // }\n    // )\n    // setBoard(boardCopy)\n    // setXIsNext(!setXIsNext.xIsNext)\n  };\n\n  const handleReset = () => {\n    dispatch({\n      type: 'RESET'\n    }); // setState({\n    //     board: Array(9).fill(null),\n    //     xIsNext: !state.xIsNext\n    // })\n    // setBoard(Array(9).fill(null))\n    // setXIsNext(true)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Board, {\n      cells: state.board,\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleReset,\n      children: \"Reset game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: winner ? `Winner is ${winner || \"\"}` : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useReducer","useState","caculatewinner","Board","initialState","board","Array","fill","xIsNext","gameReducer","state","action","type","index","winner","payload","nextState","JSON","parse","stringify","Game","dispatch","handleClick","boardCopy","handleReset"],"sources":["F:/ReactJS/my-app/src/Components/tictactoe/Game.js"],"sourcesContent":["import React, { useReducer, useState } from 'react';\r\nimport { caculatewinner } from '../../hepper';\r\nimport Board from './Board';\r\nimport \"./GameStyle.css\"\r\nconst initialState = {\r\n    board: Array(9).fill(null),\r\n    xIsNext: true\r\n}\r\n// immutable\r\nconst gameReducer = (state, action) =>{\r\n    switch (action.type) {\r\n        case 'CLICK':{\r\n            const {board, xIsNext} = state\r\n            const {index, winner} = action.payload\r\n            if(winner || board[index]) return state\r\n            const nextState = JSON.parse(JSON.stringify(state))\r\n            nextState.board[index] = xIsNext ? \"X\" : \"O\"\r\n            nextState.xIsNext = !xIsNext\r\n            return nextState\r\n        }\r\n        case 'RESET':{\r\n            const nextState = JSON.parse(JSON.stringify(state));\r\n            nextState.board\r\n            return nextState\r\n        }\r\n        default:\r\n            break;\r\n\r\n    }\r\n    return state\r\n}\r\nconst Game = () => {\r\n    // const [board, setBoard] = useState(Array(9).fill(null))\r\n    // const [xIsNext, setXIsNext] = useState(true)\r\n    const [state, dispatch] = useReducer(gameReducer,initialState);\r\n    // const [state , setState] = useState({\r\n    //     xIsNext: true,\r\n    //     board: Array(9).fill(null),\r\n    // })\r\n    const winner = caculatewinner(state.board);\r\n    const handleClick = (index)=>{\r\n        const boardCopy = [...state.board]\r\n        // if(winner || boardCopy[index]) return\r\n        dispatch({\r\n            type: 'CLICK',\r\n            payload: {\r\n                index,\r\n                winner,\r\n            }\r\n        })\r\n        boardCopy[index] = state.xIsNext ? \"X\" : \"O\";\r\n        // setState({\r\n        //     board: boardCopy,\r\n        //     xIsNext: !state.xIsNext\r\n        // }\r\n        // )\r\n        // setBoard(boardCopy)\r\n        // setXIsNext(!setXIsNext.xIsNext)\r\n    }\r\n    const handleReset = ()=>{\r\n        dispatch({\r\n            type: 'RESET',\r\n\r\n        })\r\n        // setState({\r\n        //     board: Array(9).fill(null),\r\n        //     xIsNext: !state.xIsNext\r\n        // })\r\n        // setBoard(Array(9).fill(null))\r\n        // setXIsNext(true)\r\n    }\r\n    return (\r\n        <div>\r\n            <Board cells={state.board} onClick={handleClick}></Board>\r\n            <button onClick={handleReset}>Reset game</button>\r\n            <div>{winner ? `Winner is ${winner || \"\"}` : \"\"}</div>\r\n        </div>\r\n    );\r\n};\r\nexport default Game;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,iBAAP;;AACA,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAEC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CADU;EAEjBC,OAAO,EAAE;AAFQ,CAArB,C,CAIA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAkB;EAClC,QAAQA,MAAM,CAACC,IAAf;IACI,KAAK,OAAL;MAAa;QACT,MAAM;UAACP,KAAD;UAAQG;QAAR,IAAmBE,KAAzB;QACA,MAAM;UAACG,KAAD;UAAQC;QAAR,IAAkBH,MAAM,CAACI,OAA/B;QACA,IAAGD,MAAM,IAAIT,KAAK,CAACQ,KAAD,CAAlB,EAA2B,OAAOH,KAAP;QAC3B,MAAMM,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeT,KAAf,CAAX,CAAlB;QACAM,SAAS,CAACX,KAAV,CAAgBQ,KAAhB,IAAyBL,OAAO,GAAG,GAAH,GAAS,GAAzC;QACAQ,SAAS,CAACR,OAAV,GAAoB,CAACA,OAArB;QACA,OAAOQ,SAAP;MACH;;IACD,KAAK,OAAL;MAAa;QACT,MAAMA,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeT,KAAf,CAAX,CAAlB;QACAM,SAAS,CAACX,KAAV;QACA,OAAOW,SAAP;MACH;;IACD;MACI;EAhBR;;EAmBA,OAAON,KAAP;AACH,CArBD;;AAsBA,MAAMU,IAAI,GAAG,MAAM;EAAA;;EACf;EACA;EACA,MAAM,CAACV,KAAD,EAAQW,QAAR,IAAoBrB,UAAU,CAACS,WAAD,EAAaL,YAAb,CAApC,CAHe,CAIf;EACA;EACA;EACA;;EACA,MAAMU,MAAM,GAAGZ,cAAc,CAACQ,KAAK,CAACL,KAAP,CAA7B;;EACA,MAAMiB,WAAW,GAAIT,KAAD,IAAS;IACzB,MAAMU,SAAS,GAAG,CAAC,GAAGb,KAAK,CAACL,KAAV,CAAlB,CADyB,CAEzB;;IACAgB,QAAQ,CAAC;MACLT,IAAI,EAAE,OADD;MAELG,OAAO,EAAE;QACLF,KADK;QAELC;MAFK;IAFJ,CAAD,CAAR;IAOAS,SAAS,CAACV,KAAD,CAAT,GAAmBH,KAAK,CAACF,OAAN,GAAgB,GAAhB,GAAsB,GAAzC,CAVyB,CAWzB;IACA;IACA;IACA;IACA;IACA;IACA;EACH,CAlBD;;EAmBA,MAAMgB,WAAW,GAAG,MAAI;IACpBH,QAAQ,CAAC;MACLT,IAAI,EAAE;IADD,CAAD,CAAR,CADoB,CAKpB;IACA;IACA;IACA;IACA;IACA;EACH,CAXD;;EAYA,oBACI;IAAA,wBACI,QAAC,KAAD;MAAO,KAAK,EAAEF,KAAK,CAACL,KAApB;MAA2B,OAAO,EAAEiB;IAApC;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAQ,OAAO,EAAEE,WAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ,eAGI;MAAA,UAAMV,MAAM,GAAI,aAAYA,MAAM,IAAI,EAAG,EAA7B,GAAiC;IAA7C;MAAA;MAAA;MAAA;IAAA,QAHJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAOH,CA/CD;;GAAMM,I;;KAAAA,I;AAgDN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}